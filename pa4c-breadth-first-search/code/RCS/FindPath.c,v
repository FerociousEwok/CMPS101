head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2015.08.02.02.19.08;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.08.02.01.50.01;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.31.06.16.37;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.31.06.14.42;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// Bradley Bernard, bmbernar@@ucsc.edu
// CS 101: PA4
// July 30, 2015
// $Id: FindPath.c,v 1.3 2015-08-01 18:50:01-07 - - $


#include<stdio.h>
#include<string.h>
#include<stdlib.h>

#include "Graph.h"

#define MAX_LEN 255

int main(int argc, char * argv[]){

   FILE *in, *out;
   char line[MAX_LEN];
   
   if( argc != 3 ){
      printf("FindPath: %s <input file> <output file>\n", argv[0]);
      exit(1);
   }

   in = fopen(argv[1], "r");
   out = fopen(argv[2], "w");
   if( in==NULL ){
      printf("Unable to open file %s for reading\n", argv[1]);
      exit(1);
   }
   if( out==NULL ){
      printf("Unable to open file %s for writing\n", argv[2]);
      exit(1);
   }

   fgets(line, MAX_LEN, in);
   int size = 0;
   sscanf(line, "%d", &size);
   
   Graph G = newGraph(size);
   while( fgets(line, MAX_LEN, in) != NULL)  {
      int a = 0;
      int b = 0;
      sscanf(line, "%d %d", &a, &b);
      if(a == 0 && b == 0) 
         break;
      addEdge(G, a, b);   
   }
   printGraph(out, G);
   
   int cnt = 0;
   while( fgets(line, MAX_LEN, in) != NULL)  {
      int a = 0;
      int b = 0;
      sscanf(line, "%d %d", &a, &b);
      if(a == 0 && b == 0) 
         break;
      if(cnt++ != 0)
         fprintf(out, "\n");
      fprintf(out, "\n");
      BFS(G, a);
      int d = getDist(G, b);
      fprintf(out, "The distance from %d to %d is ", a, b);
      if(d == INF)
         fprintf(out, "infinity\n");
      else
         fprintf(out, "%d\n", d);
      List P = newList();
      getPath(P, G, b);
      if(front(P) == NIL)
         fprintf(out, "No %d-%d path exists", a, b);
      else {
         fprintf(out, "A shortest %d-%d path is: ", a, b);
         printList(out, P);
      }
      freeList(&P);
   }

   fprintf(out, "\n");
   freeGraph(&G);   

   /* close files */
   fclose(in);
   fclose(out);
   return(0);
}
@


1.3
log
@-
@
text
@d4 1
a4 1
// $Id: FindPath.c,v 1.2 2015-07-30 23:16:37-07 - - $
d19 1
a19 2

   // check command line for correct number of arguments
a24 1
   // open files for reading and writing 
a35 1
   /* read each line of input file, then count and print tokens */
d39 1
a40 1

d45 2
a46 1
      if(a == 0 && b == 0) break;
a48 1

d50 1
d56 2
a57 1
      if(a == 0 && b == 0) break;
a84 1

@


1.2
log
@-
@
text
@d4 1
a4 2
// $Author$
// $Id: FindPath.c,v 1.1 2015-07-30 23:14:42-07 - - $
d8 1
d10 2
a11 1
#include<string.h>
a16 1
   int n, count=0;
a18 2
   char tokenlist[MAX_LEN];
   char* token;
d22 1
a22 1
      printf("Usage: %s <input file> <output file>\n", argv[0]);
d39 5
d45 31
a75 10
      count++;
      n = 0;
      token = strtok(line, " \n");
      tokenlist[0] = '\0';
      while( token!=NULL ){
         strcat(tokenlist, "   ");
         strcat(tokenlist, token);
         strcat(tokenlist, "\n");
         n++;
         token = strtok(NULL, " \n");
d77 1
a77 2
      fprintf(out, "line %d contains %d token%s: \n", count, n, n==1?"":"s");
      fprintf(out, "%s\n", tokenlist);
d80 3
@


1.1
log
@-
@
text
@d4 2
a5 1
// $Id$
@
